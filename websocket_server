#-*- coding:utf8 -*-

import threading
import hashlib
import socket
import base64
import struct
import sys
sys.path.append("..")
from public.logformat import SumapayLog
import pdb
import Queue

#定义全局日志格式
logger = SumapayLog().get_logger()

#定义全局接入客户端
clients = set()
messages = Queue.Queue()

#获取服务器日志，发送给消息队列
def get_server_log(dname):
    fp = open('/tmp/haproxy.log', 'r')
    line = fp.readlines()
    while line:
        fp.seek(0,1)
        for i in line:
            messages.put(i.strip())
        line = fp.readlines()


#返回消息给客户端,消息处理线程
def notify():
    while not messages.empty():
        notice = messages.get()
        token = b"\x81"
        length = len(notice)
        if length < 126:
            token += struct.pack("B", length)
        elif length >= 126 and length <= 65535:
            token += struct.pack("!BH", 126, length)
        else:
            token += struct.pack("!BQ", 127, length)
        message = "%s%s" %(token, notice)
        for connection in clients:
            try :
                print "即将发送信息给客户端"
                 #pdb.set_trace()
                connection.send(message)
            except Exception,e :
                print e
                print "给客户端发送消息异常，客户端为%s"  %(connection)
                clients.remove(connection)


#客户端处理线程
class websocket_thread(threading.Thread):
    def __init__(self, connection, username):
        super(websocket_thread, self).__init__()
        self.connection = connection
        self.username = username

    def run(self):
        print '有新的客户端加入!'
        data = self.connection.recv(1024)
        headers = self.parse_headers(str(data))
        token = self.generate_token(headers['Sec-WebSocket-Key'])
        self.connection.send('\
HTTP/1.1 101 WebSocket Protocol Hybi-10\r\n\
Upgrade: WebSocket\r\n\
Connection: Upgrade\r\n\
Sec-WebSocket-Accept: %s\r\n\r\n' % token)
        while True:
            try:
                data = self.connection.recv(1024)
            except socket.error, e:
                print e.message
                clients.pop(self.connection)
                break
            if not data:
                continue
            data = self.parse_data(data)
            if not str(data).strip():
                continue
            else:
                if 'domain' in str(data):
                    get_server_log("domain1")
                messages.put(self.username + ": " + str(data))
                notify_thread = threading.Thread(target=notify, args=())
                notify_thread.start()


    def parse_data(self, msg):
        v = ord(msg[1]) & 0x7f
        if v == 0x7e:
            p = 4
        elif v == 0x7f:
            p = 10
        else:
            p = 2
        mask = msg[p:p+4]
        data = msg[p+4:]
        return ''.join([chr(ord(v) ^ ord(mask[k%4])) for k, v in enumerate(data)])

    def parse_headers(self, msg):
        headers = {}
        header, data = msg.split('\r\n\r\n', 1)
        for line in header.split('\r\n')[1:]:
            key, value = line.split(': ', 1)
            headers[key] = value
        headers['data'] = data
        return headers

    def generate_token(self, msg):
        key = msg + '258EAFA5-E914-47DA-95CA-C5AB0DC85B11'
        ser_key = hashlib.sha1(key).digest()
        return base64.b64encode(ser_key)

#服务端监听线程
class websocket_server(threading.Thread):
    def __init__(self, port):
        super(websocket_server, self).__init__()
        self.port = port

    def run(self):
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        sock.bind(('172.17.0.2', self.port))
        sock.listen(5)
        logger.info('websocket server started!')
        while True:
            connection, address = sock.accept()
            try:
                clients.add(connection)
                username = "ID" + str(address[1])
                thread = websocket_thread(connection, username)
                thread.start()
            except socket.timeout:
                logger.error('websocket connection timeout!')

if __name__ == '__main__':
    #mutex = threading.Lock()
    server = websocket_server(9000)
    server.start()
                                            
